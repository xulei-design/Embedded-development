C51 COMPILER V9.54   UART                                                                  05/07/2023 20:26:23 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN ..\output\uart.obj
COMPILER INVOKED BY: E:\keil\keil5\keil5 install\C51\BIN\C51.EXE ..\source\uart.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTE
                    -XTEND PRINT(..\listing\uart.lst) OBJECT(..\output\uart.obj)

line level    source

   1          #include "uart.h"
   2          
   3          
   4          
   5          unsigned char recv_buf[MAX_REV_NUM];
   6          unsigned char recv_cnt;
   7          unsigned char recv_flag=0;
   8          unsigned char machine_step = 0;
   9          
  10          
  11          
  12          void UartInit(void)             //9600bps@11.0592MHz
  13          {
  14   1              SCON = 0x50;            //8位数据,可变波特率
  15   1              TMOD &= 0x0F;           //清除定时器1模式位
  16   1              TMOD |= 0x20;           //设定定时器1为8位自动重装方式
  17   1              TL1 = 0xFD;             //设定定时初值
  18   1              TH1 = 0xFD;             //设定定时器重装值
  19   1              ET1 = 0;                //禁止定时器1中断
  20   1              TR1 = 1;                //启动定时器1
  21   1          ES = 1;         //串行中断打开
  22   1          
  23   1      }
  24          
  25          void sendByte(unsigned char dat)
  26          {
  27   1              SBUF = dat;
  28   1              while(!TI);  //发送等待，发送完成，将发送中断位清0
  29   1                      TI = 0;
  30   1      }
  31          
  32          void sendString(unsigned char *dat) //只需传递首地址
  33          {
  34   1         while(*dat != '\0')
  35   1         {
  36   2              sendByte(*(dat++)); //*dat代表的是首地址 *dat = &dat
  37   2         }       
  38   1      }
  39          
  40          char putchar(char c) //c语言中是打印到屏幕，现在让它打印到串口，定向到串口
  41          //printf重定向
  42          {
  43   1          sendByte(c);
  44   1          return c;
  45   1      }
  46          
  47          void clr_recvbuffer(unsigned char *buf)  //清除数组数据，数据缓冲区
  48          {
  49   1          unsigned char i;
  50   1          for(i=0;i<MAX_REV_NUM;i++)
  51   1          {
  52   2              buf[i] = 0;
  53   2          }
  54   1      }
C51 COMPILER V9.54   UART                                                                  05/07/2023 20:26:23 PAGE 2   

  55          
  56          
  57          void uart_ISR(void) interrupt 4 
  58          //串行口中断服务函数
  59          //计算机发送一帧数据通过com3口传递到com2口，然后通过com2传递给单片机，
  60          //当单片机接收完这一帧数据时，接收中断RI会置1，进入到中断函数中对数据进行处理，
  61          {
  62   1       
  63   1          static unsigned char recv_data; //接受的中间变量
  64   1          static unsigned char sum_check;
  65   1          static unsigned char xor_check;
  66   1          static unsigned char recv_cnt = 0;
  67   1          if(RI)
  68   1          {
  69   2              RI = 0;
  70   2              recv_data = SBUF;
  71   2              switch(machine_step)
  72   2              {
  73   3                  case 0:
  74   3                      if(recv_data == 0x55)
  75   3                      {
  76   4                          machine_step = 1;
  77   4                      }
  78   3                      else
  79   3                      {
  80   4                          machine_step = 0;
  81   4                      }
  82   3                  break;
  83   3                  case 1:
  84   3                      if(recv_data == 0xAA)
  85   3                      {
  86   4                          machine_step = 2;
  87   4                          recv_cnt = 0;
  88   4                      }
  89   3                      else
  90   3                      {
  91   4                          machine_step = 0;
  92   4                      }
  93   3                  break;
  94   3                  case 2:  //校验从数据校验，帧头帧尾不会校验，开始和校验，异或校验，接收数据
  95   3                      sum_check += recv_data;
  96   3                      xor_check ^= recv_data;
  97   3                      recv_buf[recv_cnt] = recv_data; //保存数据
  98   3                      recv_cnt++;
  99   3                      if(recv_cnt > 2)    //数据固定个数        
 100   3                      {
 101   4                          machine_step = 3;
 102   4                      }
 103   3                      else
 104   3                      {
 105   4                          machine_step = 2;
 106   4                      }
 107   3                  break;
 108   3                  case 3:  //校验
 109   3                      if(sum_check == recv_data) //和校验通过
 110   3                      {   
 111   4                          machine_step = 4;
 112   4                      }
 113   3                      else
 114   3                      {
 115   4                          machine_step = 0;
 116   4                      }
C51 COMPILER V9.54   UART                                                                  05/07/2023 20:26:23 PAGE 3   

 117   3                  break;
 118   3                  case 4:
 119   3                      if(xor_check == recv_data) //异或校验通过
 120   3                      {   
 121   4                          recv_flag = 1;  //正确接收一包数据
 122   4                      }
 123   3                      else
 124   3                      {
 125   4                          machine_step = 0;
 126   4                      }
 127   3                      machine_step = 0;
 128   3                      recv_cnt = 0;
 129   3                      sum_check = 0;
 130   3                      xor_check = 0;
 131   3                  break;
 132   3                  default :break;    
 133   3              }
 134   2          }
 135   1          if(TI)
 136   1          {
 137   2              TI = 0;
 138   2          }
 139   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
